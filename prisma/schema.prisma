generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  isCashier     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cashSessions  CashSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  title      String
  desc       String
  img        String?
  price      Decimal
  isFeatured Boolean  @default(false)
  isVisible  Boolean  @default(true)
  options    Json[]
  catSlug    String
  orderItems OrderItem[]
}

model Order {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  totalAmount Decimal
  status      String      @default("pending")
  paymentType String      @default("cash") // cash, card, etc
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]
  
  // Cash register specific
  cashGiven   Decimal?
  change      Decimal?
  sessionId   String?
  cashSession CashSession? @relation(fields: [sessionId], references: [id])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  price      Decimal
  options    Json?    // Selected options for this item
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  
  @@unique([orderId, productId])
}

model CashSession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  startTime    DateTime @default(now())
  endTime      DateTime?
  startingCash Decimal
  endingCash   Decimal?
  totalSales   Decimal  @default(0)
  isActive     Boolean  @default(true)
  orders       Order[]
  notes        String?
}